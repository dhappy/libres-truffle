#!/usr/bin/env node

const {
  resolveDaoAddressOrEnsDomain,
  getInstalledApps,
  encodeActCall,
  execAppMethod,
  EXECUTE_FUNCTION_NAME,
} = require('@aragon/toolkit')
const { encodeCallScript } = require('@aragon/test-helpers/evmScript')
const CID = require('cids')
var Web3 = require('web3')

const fnamehash = (name) => {
  let node = '0x0000000000000000000000000000000000000000000000000000000000000000'
  if(name !== '') {
    const labels = name.split('/')
    for(let i = labels.length - 1; i >= 0; i--) {
      if(!labels[i]) continue
      console.log(labels[i])
      node = Web3.utils.sha3(node + Web3.utils.sha3(labels[i]).slice(2), { encoding: 'hex' })
    }
  }
  return node.toString()
}

const main = async () => {
  const environment = 'rinkeby'
  const daoName = 'libres'
  //const mapAddress = '0xeA4A51368F271D6e16EC4ccCdF898f5F96282ce5'
  const mapAddress = '0xA037bc4b324b9F8217f49C8dB8933826c1eC444F'
  // const environment = 'mainnet'
  // const daoName = 'll'
  // const mapAddress = '0xeA4A51368F271D6e16EC4ccCdF898f5F96282ce5'

  let daoAddress;
  try {
    console.info('Check if DAO already exists:')
    daoAddress = await resolveDaoAddressOrEnsDomain(daoName, environment)
    console.info(`  DAO ${daoName}: ${daoAddress}`)
  } catch(e) {
    console.error(`  DAO ${daoName}: ${e}`)
    process.exit(-10)
  }

  const apps = await getInstalledApps(daoAddress, environment)
  const agentApp = apps.find(app => app.name === 'Agent')
  const agentProxy = agentApp.proxyAddress
  console.log('Agent app: ', agentProxy)

  const { proxyAddress: votingProxy } = apps.find(
    (app) => app.name === 'Voting'
  );
  console.log('Voting app: ', votingProxy);

  const mapSignature = 'mapPath(string,string,uint8[])'
  const path = '/book/by/Aldous Huxlex/Island/'
  const pathhash = fnamehash(path)
  const cid = new CID('QmZb3XL8oT8xRpLJQVzHP76gvPuB7E423CCiXJ61pD6LeS')
  const calldata = encodeActCall(
    mapSignature, [0, cid.codec, Array.from(cid.multihash)]
  )
  const actions = [{ to: mapAddress, calldata }]
  const script = encodeCallScript(actions)
  const tx = await execAppMethod(
    daoAddress,
    votingProxy,
    'newVote',
    [script, `Update: ${path}`],
    environment
  )

  console.info(tx)

  const url =
    environment === 'mainnet'
      ? 'https://mainnet.aragon.org/'
      : environment === 'rinkeby'
      ? 'http://rinkeby.aragon.org/'
      : 'http:localhost:3000/'

  console.log(`
Done! Transaction ${tx.receipt.transactionHash} executed
Go to
  ${url}#/${daoAddress}/${votingProxy}
to verify that the vote was created.
`)

  process.exit()
}

main().catch(console.error)
